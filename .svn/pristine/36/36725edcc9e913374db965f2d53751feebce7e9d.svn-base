using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AI {
    public interface IState {
         void Execute(Character.NPC actor);
         void Enter(Character.NPC actor);
         void Exit(Character.NPC actor);
         string ToString();
    }

    public class Wander : IState {
        private static Wander _wander;
        private Wander() { }

        public static Wander GetState() {
            return _wander ?? (_wander = new Wander());
        }

        public void Execute(Character.NPC actor) {
            if (!actor.IsDead() && !actor.InCombat) {
                List<Rooms.Exits> availableExits = new List<Rooms.Exits>();
                availableExits = Rooms.Room.GetRoomExits(actor.Location);
                if (DateTime.Now.ToUniversalTime() > actor.NextAiAction) {//so it's time for this AI state to execute
                   Commands.CommandParser.ExecuteCommand(actor, availableExits[new Random().Next(0, availableExits.Count)].Direction);
                    actor.NextAiAction = DateTime.Now.AddSeconds(new Random().Next(60, 121)).ToUniversalTime(); //set when we want this action to execute next
                    if (!FSM.ContinueWithThisState()) {
                        actor.fsm.ChangeState(Speak.GetState());
                        actor.Save();
                    }
                }
            }
        }

        public void Enter(Character.NPC actor) {
            actor.NextAiAction = DateTime.Now.AddSeconds(new Random().Next(60, 121)).ToUniversalTime();
        }

        public void Exit(Character.NPC actor) {
        }

        public override string ToString() {
            return "Wander";
        }

    }

    public class Speak : IState {
        private static Speak _speak;
        private Speak() { }

        public static Speak GetState() {
            return _speak ?? (_speak = new Speak());
        }

        public void Execute(Character.NPC actor) {
            if (!actor.IsDead() && !actor.InCombat) {
                if (DateTime.Now.ToUniversalTime() > actor.NextAiAction) {
                    Commands.CommandParser.ExecuteCommand(actor, "EMOTE", "moans loudly");
                    actor.NextAiAction = DateTime.Now.AddSeconds(new Random().Next(15, 60)).ToUniversalTime();
                    if (!FSM.ContinueWithThisState()) {
                        actor.fsm.ChangeState(Wander.GetState());
                    }
                }
            }
        }

        public void Enter(Character.NPC actor) {
            actor.NextAiAction = DateTime.Now.AddSeconds(new Random().Next(15, 60)).ToUniversalTime();
        }

        public void Exit(Character.NPC actor) {
        }

        public override string ToString() {
            return "Speak";
        }
    }

    public class Combat : IState {
        private static Combat _combat;
        private Combat() { }

        public static Combat GetState() {
            return _combat ?? (_combat = new Combat());
        }

        public void Execute(Character.NPC actor) {
            //no target then switch to finding a target first
            if (actor.CurrentTarget == null) {
                actor.fsm.ChangeState(FindTarget.GetState());
            }
            //ok we have someone we can kill, let's do that
            Commands.CommandParser.ExecuteCommand(actor, "KILL", "target");

        }

        public void Enter(Character.NPC actor) {
            //no target, no fighting
            
        }

        public void Exit(Character.NPC actor) {
        }

        public override string ToString() {
            return "Combat";
        }
    }

    public class FindTarget : IState {
        private static FindTarget _findTarget;
        private FindTarget() { }

        public static FindTarget GetState() {
            return _findTarget ?? (_findTarget = new FindTarget());
        }

        public void Execute(Character.NPC actor) {
            //first let's check to see if we got any messages telling use we are being attacked and use that
            //person attacking us as the target
            //if that gets us nowhere, we need to then just kill the first non npc we find in our same location
             actor.CurrentTarget = Rooms.Room.GetPlayersInRoom(actor.Location).FirstOrDefault();
             
            if (actor.CurrentTarget == null) {//no targets in sight let's enter hunt mode until things cool down
                 actor.fsm.ChangeState(Hunt.GetState());
             }
             
            
        }

        public void Enter(Character.NPC actor) {
            
        }

        public void Exit(Character.NPC actor) {
            
        }

        public override string ToString() {
            return "FindTarget";
        }
    }

    public class Hunt : IState {
        private static Hunt _hunt;
        
        private Hunt() {}

        public static Hunt GetState(){
            return _hunt ?? (_hunt = new Hunt());
        }

        public void Execute(Character.NPC actor) {
            //if (actor.Aggressive)
            Wander.GetState().Execute(actor); //let's go to another room
            FindTarget.GetState().Execute(actor);//let's look for a target
            actor.NextAiAction = DateTime.Now.AddSeconds(new Random().Next(5, 60)).ToUniversalTime();
        }

        public void Enter(Character.NPC actor) {
        }

        public void Exit(Character.NPC actor) {
        }
    }
}


