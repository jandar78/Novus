using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Driver;
using MongoDB.Driver.Builders;
using MongoDB.Bson;
using Extensions;
using MongoDB.Bson.Serialization;
using Triggers;

namespace Items {
   public class ItemFactory {

        public static Iitem CreateItem(ObjectId id){
            BsonDocument tempItem = null;

            if (id != null) { //id got passed in so we are looking for a specific edible item
                MongoUtils.MongoData.ConnectToDatabase();
                MongoDatabase db = MongoUtils.MongoData.GetDatabase("World");
                MongoCollection itemCollection = db.GetCollection("Items");
                tempItem = itemCollection.FindOneAs<BsonDocument>(Query.EQ("_id", id));
            }

            Iitem result = null;

            result = BsonSerializer.Deserialize<Items>(tempItem);

            //add any triggers to the item
            result.ItemTriggers = new List<ITrigger>();
            result.SpeechTriggers = new List<ITrigger>();

            if (tempItem["Triggers"].AsBsonArray.Count > 0) {
                //loop through the triggers, an item can have multiple triggers for different things
                foreach (BsonDocument doc in tempItem["Triggers"].AsBsonArray) {
                    ItemTrigger trigger = new ItemTrigger(doc);
                    SubscribeToCorrectEvent(result, trigger);
                    //for most scripts we are going to want the playerID to then get anything else we may want
                    trigger.script.AddVariableForScript(result.Owner, "playerID");

                    result.ItemTriggers.Add(trigger);
                }
            }
            return result;
        }

        /// <summary>
        /// Subscribes the trigger to an item event based on the ItemTrigger.TriggerOn property
        /// </summary>
        /// <param name="result"></param>
        /// <param name="trigger"></param>
        private static void SubscribeToCorrectEvent(Iitem result, ItemTrigger trigger) {
            switch (trigger.TriggerOn) {
                case "Open":
                    result.ContainerOpened += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Close":
                    result.ContainerClosed += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Deteriorate":
                    result.Deteriorated += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Improve":
                    result.Improved += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Worn":
                    result.ItemWorn += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Ignite":
                    result.Ignited += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Extinguish":
                    result.Extinguished += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Drain":
                    result.Drained += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Recharge":
                    result.Recharged += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Examine":
                    result.Examined += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "LookIn":
                    result.LookedIn += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Store":
                    result.Stored += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Retrieve":
                    result.Retrieved += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Consume":
                    result.Consumed += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                case "Wield":
                    result.Wielded += new EventHandler<ItemEventArgs>(trigger.HandleEvent);
                    break;
                default:
                    break;
            }
        }

    }
}
