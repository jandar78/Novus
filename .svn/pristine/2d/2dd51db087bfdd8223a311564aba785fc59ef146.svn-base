using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rooms;
using User;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;

namespace Commands {
	public partial class CommandParser {

		//called from the LOOK command
		private static string DisplayPlayersInRoom(int roomId, string ignoreId) {
			StringBuilder sb = new StringBuilder();
			List<string> playersInRoom = Room.GetPlayersInRoom(roomId);
            List<string> npcsInRoom = Room.GetNPCsInRoom(roomId);
           
			if (!Room.IsDark(roomId)) {
                foreach (string id in playersInRoom) {
					if (id != ignoreId) {
						User.User otherUser = MySockets.Server.GetAUser(id);
						if (otherUser != null && otherUser.CurrentState == User.User.UserState.TALKING) {
							sb.AppendLine(otherUser.Player.FirstName + " is " + otherUser.Player.StanceState.ToString().ToLower() + " here.");
						}
					}
				}
                foreach (string id in npcsInRoom) {
                    Character.NPC npc = CharacterFactory.Factory.CreateNPCCharacterHusk();
                    npc.Load(id);
                    sb.AppendLine(npc.FirstName + " is " + npc.StanceState.ToString().ToLower() + " here.");
                }
			}
			else {
				int count = 0;
                foreach (string id in playersInRoom) {
					if (id != ignoreId) {
						User.User otherUser = MySockets.Server.GetAUser(id);
						if (otherUser != null && otherUser.CurrentState == User.User.UserState.TALKING) {
							count++;
						}
					}
				}
                count += npcsInRoom.Count;

				if (count == 1) {
					sb.AppendLine("Someone is here.");
				}
				else if (count > 1) {
					sb.AppendLine("Some persons are here.");
				}
			}

			return sb.ToString();
		}

		//called from the LOOK command
		private static string HintCheck(User.User player) {
			StringBuilder sb = new StringBuilder();
			//let's display the room hints if the player passes the check
			foreach (RoomModifier mod in Rooms.Room.GetModifiers(player.Player.Location)) {
				foreach (Dictionary<string, string> dic in mod.Hints) {
					if (player.Player.GetAttributeValue(dic["Attribute"]) >= int.Parse(dic["ValueToPass"])) {
						sb.AppendLine(dic["Display"]);
					}
				}
			}
			return sb.ToString();
		}

		//called from the MOVE command
		private static void ApplyRoomModifier(User.User player) {
			StringBuilder sb = new StringBuilder();
			//Todo:  Build a dictionary with what the player is immune/has resistance to and for how much to then calculate the actual
			//       damage/buff value that will be applied to the player
			foreach (Dictionary<string, string> modifier in Rooms.Room.GetModifierEffects(player.Player.Location)) {
				player.Player.ApplyEffectOnAttribute("Hitpoints", double.Parse(modifier["Value"]));

				double positiveValue = double.Parse(modifier["Value"]);
				if (positiveValue < 0) {
					positiveValue *= -1;
				}
				
				sb.Append(String.Format(modifier["DescriptionSelf"], positiveValue));
                if (!player.Player.IsNPC) {
                    player.MessageHandler("\r" + sb.ToString());
                }
				sb.Clear();
				sb.Append(String.Format(modifier["DescriptionOthers"], player.Player.FirstName,
					       player.Player.Gender.ToString() == "Male" ? "he" : "she", positiveValue));
				Rooms.Room.InformPlayersInRoom("\r" + sb.ToString(), player.Player.Location, new List<string>(new string[] {player.UserID}));
			}
		}
	}
}
