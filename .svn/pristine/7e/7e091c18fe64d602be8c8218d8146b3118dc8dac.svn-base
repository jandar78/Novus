using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rooms;
using User;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;
using Extensions;

namespace Commands {
	public partial class CommandParser {

        private static User.User FindTargetByName(string name, int location){
            User.User enemy = null;
                    foreach (User.User foe in MySockets.Server.GetAUserByName(name)) {
                        if (foe.Player.Location == location) {
                            enemy = foe;
                            break;
                        }
                    }
                
                    if (enemy == null) {
                    //ok it's not a player lets look through the NPC list
                        foreach (Character.NPC npc in Character.NPCUtils.GetAnNPCByName(name, location)) {
                            User.User foe = new User.User(true);
                            foe.UserID = npc.ID;
                            foe.Player = npc;
                            enemy = foe;
                            break;
                        }
                    }

            return enemy;
        }
            
        

		//this method is way too long and needs to be broken down a little bit into a few method calls
		private static void Kill(User.User player, List<string> commands) {

            TimeSpan wait = DateTime.Now.ToUniversalTime() - player.Player.LastCombatTime;
            if (wait.TotalSeconds < 5) {
                return; //no combat this round, this will eventually depend on their dexterity stat.
            }

            User.User enemy = null;

            if (commands.Count > 2 && !string.Equals(commands[2], "target", StringComparison.InvariantCultureIgnoreCase)) {
                enemy = FindTargetByName(commands[2], player.Player.Location);
            }
            //couldn't find the target by name, now let's see if our current Target is around
            if (enemy == null) {
                enemy = MySockets.Server.GetAUser(player.Player.CurrentTarget);
            }

            //didn't find a player character so let's look for an npc
            if (enemy == null) {
                Character.NPC npc = Character.NPCUtils.GetAnNPCByID(player.Player.CurrentTarget);
                if (npc != null) {
                    User.User temp = new User.User(true);
                    temp.UserID = npc.ID;
                    temp.Player = npc;
                    enemy = temp;
                }
            }

            if (enemy == null) { //target not found so no longer in combat
                //TODO: pull target not found message from DB
                player.MessageHandler("You can't kill what you can't see!");
                player.Player.InCombat = false;
                player.Player.LastTarget = player.Player.CurrentTarget; //set the current target to the last target the player had
                player.Player.CurrentTarget = null;

                if (player.Player.IsNPC) {
                    player.Player.Save(); //need to update the npc status in the DB
                }
                return;
            }

            //before we get to fighting let's make sure this target isn't already dead
            if (enemy.Player.IsDead()) {
                player.MessageHandler(enemy.Player.GenderPossesive + " is already dead");
                player.Player.InCombat = false;
                player.Player.UpdateTarget(null);
                return;
            }

           
                
			//set both players to fighting status if not already fighting
            //both players should be in combat regardless if the target will attack the attacker.
            //I may remove the auto-combat and make it maybe a bit twitch based combat.  A player could then choose
            //to go several rounds wihtout hitting the other player or just parrying them constantly.
			if (player.Player.InCombat == false || enemy.Player.InCombat == false) {
				player.Player.InCombat = true;
				enemy.Player.InCombat = true;
			}

            if (player.Player.CurrentTarget == null) {
                player.Player.UpdateTarget(enemy.UserID);
            }
            //the enemy may be being attacked by someone else if they have a target assigned already we don't want to override it
            //we'll let the AI portion handle which charcater that is attacking it should be it's target.  If the enemy is a player, they will
            //select which target they want to attack
            if (enemy.Player.CurrentTarget == null) {
                enemy.Player.UpdateTarget(player.UserID);
            }

            //this code here may be pointless now that we do the combat timestamp check at the beginning
            ////if they didn't have a combat time stamp give them one
            //if (player.Player.LastCombatTime == DateTime.MinValue) {
            //    player.Player.LastCombatTime = DateTime.Now.AddSeconds(-5);
            //}

           
			
			//Finally the good stuff
			//This here is half a round of combat when we parse the other players commands they will be the attackers
			//yes, it pays off to be the first one to strike.
			double attack = CalculateAttack(player, enemy.Player.Level);
			double defense = CalculateDefense(enemy);
			double damage = (attack - defense) * -1;

			//this is very simple and basic combat logic and it sucks but hey it's something...
			if (damage < 0) { //hey looks like the other player didn't have enough defense! Let's destroy him...
                player.MessageHandler(ParseMessage(GetMessage("Combat", "Hit", MessageType.SELF), player, enemy, damage, defense, attack)); 
                enemy.MessageHandler(ParseMessage(GetMessage("Combat", "Hit", MessageType.TARGET), player, enemy, damage, defense, attack));
                string roomMessage = ParseMessage(GetMessage("Combat", "Hit", MessageType.OTHERS), player, enemy, damage, defense, attack);

				Rooms.Room.InformPlayersInRoom(roomMessage, player.Player.Location, new List<string>(new string[] { player.UserID, enemy.UserID })); 
				enemy.Player.ApplyEffectOnAttribute("Hitpoints", damage);
			}
			else {
                player.MessageHandler(ParseMessage(GetMessage("Combat","Miss", MessageType.SELF), player, enemy, damage, defense, attack)); 
                enemy.MessageHandler(ParseMessage(GetMessage("Combat", "Miss", MessageType.TARGET), player, enemy, damage, defense, attack));
                string roomMessage = ParseMessage(GetMessage("Combat", "Miss", MessageType.OTHERS), player, enemy, damage, defense, attack); 
				Rooms.Room.InformPlayersInRoom(roomMessage, player.Player.Location, new List<string>(new string[] { player.UserID, enemy.UserID }));
			}
			
			double enemyHealth = enemy.Player.GetAttributeValue("Hitpoints");
			
            //call the methods and let them do each their thing
            if (enemy.Player.IsUnconcious()) SetUnconcious(player, enemy);
            if (enemy.Player.IsDead()) {
                SetDead(player, enemy);
                //Now start up the Rot state for body decomposition and decaying
                Character.NPC npc = enemy.Player as Character.NPC;
                if (npc != null) {
                    npc.fsm.ChangeState(AI.Rot.GetState());
                    enemy.Player = npc;
                    enemy.Player.Save();
                }
            }
            
            //combat timestamp
            player.Player.LastCombatTime = DateTime.Now.ToUniversalTime();
            
            //save as we progress through the fight
            enemy.Player.Save();
            player.Player.Save();  
		}


		#region Combat calculations
		private static double CalculateAttack(User.User player, int targetLevel) {
            double result = 0.0;
            //gonna break it out for debug purposes 
            result = (100  - (player.Player.Level - targetLevel)) * 10;
            result *= 0.01;
            //result *= (WeaponDamage * WeaponSkill);
            result += player.Player.GetAttributeValue("Strength") * player.Player.LevelModifier;
						
			return result;
		}

		private static double CalculateDefense(User.User enemy) {
			double result = 0.0;
			//lame calculation here as well
            if (!enemy.Player.CheckUnconscious) {
				double modifier = new Random().Next(0, 10);
				result = enemy.Player.GetAttributeValue("Dexterity") * (enemy.Player.GetAttributeValue("Strength") * ( modifier / 100.0));
			}
			else { //if player is unconcious he's going to die in one hit
				result = -100;
			}
			return result;
		}

		private static double CalculateDefense(Door door) {
            //some doors may have some resistance to damage
			double result = 0.0;
			return result;
		}
		#endregion Combat calculations

		#region Combat State Changes
		//state changes for combat
        //I think this is now getting handled by the actor abstract class now
		private static void SetUnconcious(User.User player, User.User enemy) {
            player.Player.ClearTarget();
            player.MessageHandler(String.Format("You knocked {0} unconcious.", enemy.Player.FirstName));
            enemy.MessageHandler(String.Format("{0} knocked you unconcious.", player.Player.FirstName));
			Room.InformPlayersInRoom(String.Format("{0} knocked {1} unconcious.", player.Player.FirstName, enemy.Player.FirstName), player.Player.Location, new List<string>(new string[] { player.UserID, enemy.UserID }));
			SetCombatTimer(player, enemy);
		}

		private static void SetDead(User.User player, User.User enemy) {
            player.Player.ClearTarget();
            player.MessageHandler(String.Format("You have killed {0}!", enemy.Player.FirstName));
            enemy.MessageHandler(String.Format("{0} has killed you!", player.Player.FirstName));
			Room.InformPlayersInRoom(String.Format("{0} killed {1}.", player.Player.FirstName, enemy.Player.FirstName), player.Player.Location, new List<string>(new string[] { player.UserID, enemy.UserID }));
            SetCombatTimer(player, enemy);
		}

		//set player timer to minvalue
		private static void SetCombatTimer(User.User player, User.User enemy) {
			player.Player.LastCombatTime = DateTime.MinValue;
			enemy.Player.LastCombatTime = DateTime.MinValue;
		}
		#endregion

		#region Finishing moves
		//finisher moves
		private static void Cleave(User.User player, List<string> commands) {//this will need a check in the future to be used with only bladed weapons
			User.User enemy = null;
			if (commands.Count > 2) {
				foreach (User.User foe in MySockets.Server.GetAUserByName(commands[2])) {
					if (foe.Player.Location == player.Player.Location) {
						enemy = foe;
					}
				}
			}
			else {//did not specify a name let's kill the first player we find unconcious in our same location
				enemy = MySockets.Server.GetCurrentUserList().Where(u => u.Player.Location == player.Player.Location && String.Compare(u.Player.ActionState.ToString(), "unconcious", true) == 0).SingleOrDefault(); 
			}

            if (enemy == null) {
                //ok it's not a player lets look through the NPC list
                foreach (Character.NPC npc in Character.NPCUtils.GetAnNPCByName(commands[2], player.Player.Location)) {
                    User.User foe = new User.User(true);
                    foe.UserID = npc.ID;
                    foe.Player = npc;
                    enemy = foe;
                    break;
                }
            }

			if (enemy == null) {
                player.MessageHandler("You can't kill what you can't see!");
				return;
			}

			if (String.Compare(enemy.Player.ActionState.ToString(),"unconcious", true) == 0) {
				if (commands.Count > 2 && commands[3].ToLower() == "slowly") {  //a slow death for your opponent, bask in it.
                    player.MessageHandler(String.Format("You slowly drive your blade through {0}'s chest and twist it a few times as {1} lays on the ground unconcious.", enemy.Player.FirstName, enemy.Player.Gender == "Male" ? "he" : "she"));
                    enemy.MessageHandler(String.Format("{0} slowly drives {1} blade through your chest and twists it a few times as you lay on the ground unconcious.", player.Player.FirstName, player.Player.Gender == "Male" ? "his" : "her"));
					string roomMessage = String.Format("{0} slowly drives {1} blade through {2}'s chest and twists it a few times as {3} lay on the ground unconcious.", player.Player.FirstName, player.Player.Gender == "Male" ? "his" : "her", enemy.Player.FirstName, enemy.Player.Gender == "Male" ? "he" : "she");
					Rooms.Room.InformPlayersInRoom(roomMessage, player.Player.Location, new List<string>(new string[] {player.UserID, enemy.UserID})); 
; 
				}
				else {
                    player.MessageHandler(String.Format("You cleave {0} as {1} lays on the ground unconcious.", enemy.Player.FirstName, enemy.Player.Gender == "Male" ? "he" : "she"));
                    enemy.MessageHandler(String.Format("{0} cleaved you as you lay on the ground unconcious.", player.Player.FirstName));
					string roomMessage = String.Format("{0} cleaved {1} as {2} lay on the ground unconcious.", player.Player.FirstName, enemy.Player.FirstName, enemy.Player.Gender == "Male" ? "he" : "she");
					Rooms.Room.InformPlayersInRoom(roomMessage, player.Player.Location, new List<string>(new string[] {player.UserID, enemy.UserID})); 
				}
				SetDead(player, enemy);
			}
			else {
                player.MessageHandler(String.Format("You can't cleave {0}, {1} not unconcious.", enemy.Player.FirstName, enemy.Player.Gender == "Male" ? "he's" : "she's"));
			}
		}
		#endregion

        #region Combat Messages
        //replaces the placeholder with the actual value, so edits can all be made on the DB, if you add anymore place holders this is where you would do the replace
        public static string ParseMessage(string message, User.User attacker, User.User target, double damage, double defense, double attack) {

            message = message.Replace("{attacker}", attacker.Player.FirstName)
                             .Replace("{target}", target.Player.FirstName)
                             .Replace("{him-her}", target.Player.Gender == "Male" ? "him" : "her")
                             .Replace("{damage}", (damage * -1).ToString().FontColor(Utils.FontForeColor.RED))
                             .Replace("{attack}", attack.ToString())
                             .Replace("{defense}", defense.ToString());
                       
            return message;
        }

        public enum MessageType { SELF, TARGET, OTHERS };

        public static string GetMessage(string collection, string type, MessageType to) {
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase db = MongoUtils.MongoData.GetDatabase("Messages");
            MongoCollection table = db.GetCollection(collection.CamelCaseWord());
            IMongoQuery query = Query.EQ("_id", type.CamelCaseWord());

            var result = table.FindOneAs<BsonDocument>(query).AsBsonDocument;

            BsonArray msg = result["Messages"][0][(int)to].AsBsonArray;

            int choice = new Random().Next(0, msg.Count);
 
            BsonDocument message = msg[choice].AsBsonDocument;

            return message[0].AsString;

        }
        #endregion Combat Messages

        #region Break shit
        private static void Destroy(User.User player, List<string> commands) {
			player.MessageHandler("You think about it and then decide against it.");
		}

		private static void Break(User.User player, List<string> commands) {
			string objectName = "";

			for (int i = commands.Count -1; i > 0; i--){ //this should keep the words in the order we want
				objectName += commands[i];
			}

		    //let's see if it a door we want to break down first
			if (BreakDoor(player, commands)) return;
			if	(BreakObject(player, objectName)) return;

            player.MessageHandler("You look all around but can't find that to break.");
			
		}

		private static bool BreakDoor(User.User player, List<string> commands){
			Door door = FindDoor(player.Player.Location, commands);
			if (door == null) {
				return false;
			}

			if (door.Destroyed) {
                player.MessageHandler("It is already destroyed, why bother?");
				return true;
			}

		    double attack = CalculateAttack(player, 0);
			double defense = CalculateDefense(door);
			double damage = attack - defense;
			List<string> message = door.ApplyDamage(damage);
			door.UpdateDoorStatus();
            player.MessageHandler(message[0].FontColor(Utils.FontForeColor.RED));
			Rooms.Room.InformPlayersInRoom(String.Format(message[1], player.Player.FirstName), player.Player.Location, new List<string>(new string[] {player.UserID}));
			return true;
		}

		private static bool BreakObject(User.User player, string objectName) {
			return false;
		}
		#endregion
	}
} 
