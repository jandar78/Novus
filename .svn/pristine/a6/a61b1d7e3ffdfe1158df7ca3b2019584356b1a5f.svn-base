using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rooms;
using User;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;
using Extensions;

namespace Commands {
    public partial class CommandParser {
        //TODO: should be able to find item based on partial name by using best guess
        //There is a bug with the item when it is picked up or equipped where it is being duped in the DB in the players inventory
        
        public static void Drop(User.User player, List<string> commands) {
            //1.get the item name from the command, may have to join all the words after dropping the command
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            //2.get the item from the DB
            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), -1);  //location should be -1 if a player is in posession of an item
            //3.have player drop item
            string msgPlayer = null;

            if (item != null) {
                player.Player.RemoveItemFromInventory(item);
                item.Location = player.Player.Location;
                item.Save();

                //4.Inform room and player of action
                string msgOthers = string.Format("{0} drops {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You drop {0}", item.Name);
            }
            else {
                msgPlayer = "You are not carrying anything of the sorts.";
            }
            
            player.MessageHandler(msgPlayer);
        }


        public static void Grab(User.User player, List<string> commands) {
            //1.get the item name from the command, may have to join all the words after dropping the command
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            //2.get the item from the DB
            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), player.Player.Location);  
            string msgPlayer = null;
            //3.have player grab item
            if (item != null) {
                item.Location = -1;
                item.Save();
                player.Player.AddItemToInventory(item);

                //4.Inform room and player of action
                string msgOthers = string.Format("{0} grabs {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));

                msgPlayer = string.Format("You grab {0}", item.Name);
            }
            else {
                msgPlayer = "That's not anywhere in sight to be picked up";
            }

            player.MessageHandler(msgPlayer);
        }

        public static void Unequip(User.User player, List<string> commands) {
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            string msgPlayer = null;

            if (item != null){
                player.Player.UnequipItem(item);
                string msgOthers = string.Format("{0} unequips {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] {player.UserID}));
                msgPlayer = string.Format("You unequip {0}", item.Name);
            }
            else {
                msgPlayer = "You don't seem to be equipping that at the moment.";
            }

                player.MessageHandler(msgPlayer);
        }

        public static void Equip(User.User player, List<string> commands) {
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            string msgPlayer = null;
            
            Items.Iweapon weapon = (Items.Iweapon)item;

            if (item != null && item.IsWearable) {
                player.Player.EquipItem(item);
                string msgOthers = string.Format("{0} equips {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You equip {0}", item.Name);
            }
            else if (weapon.IsWieldable) {
                msgPlayer = "This item can only be wielded not worn.";
            }
            else if (!item.IsWearable || !weapon.IsWieldable) {
                msgPlayer = "That doesn't seem like something you can wear.";
            }
            else {
                msgPlayer = "You don't seem to have that in your inventory to be able to wear.";
            }

                player.MessageHandler(msgPlayer);
        }

        public static void Wield(User.User player, List<string> commands) {
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }
            
            string msgPlayer = null;

            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            Items.Iweapon weapon = (Items.Iweapon)item;
            
            if (weapon != null && weapon.IsWieldable && player.Player.GetWieldedWeapons().Count < 2) {
                if (string.IsNullOrEmpty(player.Player.MainHand)) { //no mainhand assigned yet
                    player.Player.MainHand = Items.Wearable.WIELD_RIGHT.ToString(); //we will default to the right hand
                }
                
                player.Player.Wield(item);
                string msgOthers = string.Format("{0} wields {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You wield {0}", item.Name);
            }
            else if (player.Player.GetWieldedWeapons().Count == 2){
                msgPlayer =  "You are already wielding two weapons...and you don't seem to have a third hand.";
            }
            else if (item.IsWearable) {
                msgPlayer = "This item can only be wielded not worn.";
            }
            else if (!item.IsWearable) {
                msgPlayer = "That not something you can wear or would want to wear.";
            }
            else {
                msgPlayer = "You don't seem to have that in your inventory to be able to wear.";
            }

            player.MessageHandler(msgPlayer);
        }

        public static void Eat(User.User player, List<string> commands) {
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            StringBuilder itemName = new StringBuilder();
            string upDown = "gained";

            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            StringBuilder msgPlayer = new StringBuilder();
            Items.Iitem item = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            Items.Iedible food = (Items.Iedible)item;

            Dictionary<string, double> affectAttributes = food.Consume();
            foreach (KeyValuePair<string, double> attribute in affectAttributes) {
                //TODO: this doesn't seem to be working properly for Hitpoints, gonna have to put a breakpoint here
                player.Player.ApplyEffectOnAttribute(attribute.Key.CamelCaseWord(), attribute.Value);
                if (attribute.Value < 0) {
                    upDown = "lost";    
                }

                msgPlayer.AppendLine(string.Format("You {0} {1:F1} points of {2}.", upDown, attribute.Value, attribute.Key));
            }

            //now remove it from the players inventory
            player.Player.RemoveItemFromInventory(item);

            //item has been consumed so get rid of it from the DB
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase db = MongoUtils.MongoData.GetDatabase("World");
            MongoCollection col = db.GetCollection("Items");
            col.Remove(Query.EQ("_id", item.Id)); 

            
            player.MessageHandler(msgPlayer.ToString());
        }
        
    }
}
