using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.Builders;
using Extensions;
using CharacterEnums;

namespace Character {
    public class NPC : Character {
        public AI.FSM fsm {
            get;
            set;
        }

        private bool IsMob { 
            get; set; 
        }

        public NPC() {
            fsm  =  new AI.FSM(ID);
        }

        public override void Save() {
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase characterDB = MongoUtils.MongoData.GetDatabase("Characters");
            if (this.ID == null) {
                this.ID = new MongoDB.Bson.ObjectId().ToString();
            }; //new character
            MongoCollection characterCollection = characterDB.GetCollection<BsonDocument>("NPCCharacter");
            IMongoQuery search = Query.EQ("_id", ObjectId.Parse(this.ID));
            BsonDocument npcCharacter = characterCollection.FindOneAs<BsonDocument>(search);

            if (npcCharacter == null) {
                //this is the players first save, create everything from scratch
                npcCharacter = new BsonDocument {
					//no _id let MongoDB assign it one so we don't have to deal with duplicate values logic
					{"FirstName", this.FirstName.ToLower()},
					{"LastName", this.LastName.ToLower()},
					{"Race", this.Race.CamelCaseWord()},
					{"Class", this.Class.CamelCaseWord()},
					{"Gender", this.Gender.CamelCaseWord()},
                    {"SkinColor", this.SkinColor.CamelCaseWord()},
                    {"SkinType", this.SkinType.CamelCaseWord()},
                    {"HairColor", this.HairColor.CamelCaseWord()},
                    {"EyeColor", this.EyeColor.CamelCaseWord()},
                    {"Weight", this.Weight},
                    {"Height", this.Height},
                    {"ActionState", this.ActionState.ToString().CamelCaseWord()},
					{"StanceState", this.StanceState.ToString().CamelCaseWord()},
					{"Description", this.Description},
					{"Location", this.Location},
                    {"AiState", fsm.state.ToString()},
                    {"previousAiState", fsm.previousState.ToString()},
                    {"AiGlobalState", fsm.globalState.ToString()}
                    
				};

                BsonDocument attributes = new BsonDocument{
					{"Name",""},
					{"Value",""},
					{"Max",""},
					{"RegenRate",""}
				};

                BsonArray attributeList = new BsonArray();

                foreach (Attribute a in this.Attributes.Values) {
                    attributes["Name"] = a.Name;
                    attributes["Value"] = (BsonValue)a.Value;
                    attributes["Max"] = (BsonValue)a.Max;
                    attributes["RegenRate"] = (BsonValue)a.RegenRate;

                    attributeList.Add(attributes);
                }

                npcCharacter.Add("Attributes", attributeList);


            }
            else {
                npcCharacter["FirstName"] = this.FirstName.ToLower();
                npcCharacter["LastName"] = this.LastName.ToLower();
                npcCharacter["Race"] = this.Race;
                npcCharacter["Class"] = this.Class;
                npcCharacter["Gender"] = this.Gender.CamelCaseWord();
                npcCharacter["SkinColor"] = this.SkinColor.CamelCaseWord();
                npcCharacter["SkinType"] = this.SkinType.CamelCaseWord();
                npcCharacter["HairColor"] = this.HairColor.CamelCaseWord();
                npcCharacter["EyeColor"] = this.EyeColor.CamelCaseWord();
                npcCharacter["Weight"] = this.Weight;
                npcCharacter["Height"] = this.Height;
                npcCharacter["Description"] = this.Description;
                npcCharacter["Location"] = this.Location;
                npcCharacter["ActionState"] = this.ActionState.ToString().CamelCaseWord();
                npcCharacter["StanceState"] = this.StanceState.ToString().CamelCaseWord();
                npcCharacter["AiState"] = fsm.state.ToString();
                npcCharacter["previousAiState"] = fsm.previousState.ToString();
                npcCharacter["AiGlobalState"] = fsm.globalState.ToString();

                BsonArray playerAttributes = npcCharacter["Attributes"].AsBsonArray;


                foreach (BsonDocument attrib in playerAttributes) {
                    attrib["Value"] = this.Attributes[attrib["Name"].ToString()].Value;
                    attrib["Max"] = this.Attributes[attrib["Name"].ToString()].Max;
                    attrib["RegenRate"] = this.Attributes[attrib["Name"].ToString()].RegenRate;
                }
            }

            characterCollection.Save(npcCharacter);

            if (this.ID == "000000000000000000000000") {
                this.ID = npcCharacter["_id"].AsObjectId.ToString();
            }

        }

        public override void Load(string id) {
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase characterDB = MongoUtils.MongoData.GetDatabase("Characters");
            MongoCollection characterCollection = characterDB.GetCollection<BsonDocument>("NPCCharacter");
            IMongoQuery query = Query.EQ("_id", ObjectId.Parse(id));
            BsonDocument found = characterCollection.FindOneAs<BsonDocument>(query);

            ID = found["_id"].AsObjectId.ToString();
            FirstName = found["FirstName"].AsString.CamelCaseWord();
            LastName = found["LastName"].AsString.CamelCaseWord();
            _class = (CharacterClass)Enum.Parse(typeof(CharacterClass), found["Class"].AsString.ToUpper());
            _race = (CharacterRace)Enum.Parse(typeof(CharacterRace), found["Race"].AsString.ToUpper());
            _gender = (Genders)Enum.Parse(typeof(Genders), found["Gender"].AsString.ToUpper());
            _skinType = (SkinType)Enum.Parse(typeof(SkinType), found["SkinType"].AsString.ToUpper());
            _skinColor = (SkinColors)Enum.Parse(typeof(SkinColors), found["SkinColor"].AsString.ToUpper());
            _skinType = (SkinType)Enum.Parse(typeof(SkinType), found["SkinType"].AsString.ToUpper());
            _hairColor = (HairColors)Enum.Parse(typeof(HairColors), found["HairColor"].AsString.ToUpper());
            _eyeColor = (EyeColors)Enum.Parse(typeof(EyeColors), found["EyeColor"].AsString.ToUpper());
            Height = found["Height"].AsDouble;
            Weight = found["Weight"].AsDouble;
            _stanceState = (CharacterStanceState)Enum.Parse(typeof(CharacterStanceState), found["StanceState"].AsString.ToUpper());
            _actionState = (CharacterActionState)Enum.Parse(typeof(CharacterActionState), found["ActionState"].AsString.ToUpper());
            Description = found["Description"].AsString;
            Location = found["Location"].AsInt32;
            

            //if you just use var instead of casting it like this you will be in a world of pain and suffering when dealing with subdocuments.
            BsonArray playerAttributes = found["Attributes"].AsBsonArray;

            if (playerAttributes != null) {
                foreach (BsonDocument attrib in playerAttributes) {

                    if (!this.Attributes.ContainsKey(attrib["Name"].ToString())) {
                        Attribute tempAttrib = new Attribute();
                        tempAttrib.Name = attrib["Name"].ToString();
                        tempAttrib.Value = attrib["Value"].AsDouble;
                        tempAttrib.Max = attrib["Max"].AsDouble;
                        tempAttrib.RegenRate = attrib["RegenRate"].AsDouble;

                        this.Attributes.Add(tempAttrib.Name, tempAttrib);
                    }
                    else {
                        this.Attributes[attrib["Name"].ToString()].Max = attrib["Max"].AsDouble;
                        this.Attributes[attrib["Name"].ToString()].Value = attrib["Value"].AsDouble;
                        this.Attributes[attrib["Name"].ToString()].RegenRate = attrib["RegenRate"].AsDouble;
                    }
                }
            }
        }
      
    }

    

    public class NPCUtils {
        private NPCUtils Instance;
        private NPCUtils() {
            Loaded = false;
            ProcessingAI = false;
        }

        public NPCUtils GetInstance() {
            return Instance ?? (Instance = new NPCUtils());
        }

        public static bool Loaded {
            get;
            set;
        }

        public static bool ProcessingAI {
            get;
            set;
        }

        public static void LoadNPCs(){
            //get NPC data form db and call characterfactory
        }

        public static void ProcessAiForNpcs() {
            if (!Loaded && !ProcessingAI) {
                ProcessingAI = true;
                //loop through each NPC and call the Update() method
                foreach(NPC npc in GetNPCList()){
                    npc.fsm.Update(); 
                }
            }
        }

        private static List<NPC> GetNPCList() {
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase character = MongoUtils.MongoData.GetDatabase("Characters");
            MongoCollection npcCollection = character.GetCollection("NPCCharacter");

            return new List<NPC>();
        }
    }

}
