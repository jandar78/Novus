using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rooms;
using User;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;
using Extensions;

namespace Commands {
	public partial class CommandParser {

		//Todo: this needs more work done and also need to figure out a nice way to display it to the user
		private static void DisplayStats(User.User player, List<string> commands) {
			StringBuilder sb = new StringBuilder();
			sb.AppendLine("\nName: " + player.Player.FirstName.CamelCaseWord() + " " + player.Player.LastName.CamelCaseWord());
			sb.AppendLine("Class: " + player.Player.Class);
			sb.AppendLine("Race: " + player.Player.Race);         
            foreach (KeyValuePair<string, Character.Attribute> attrib in player.Player.GetAttributes()) {
                sb.AppendLine(attrib.Key.CamelCaseWord() + ": " + attrib.Value.Value + "/" + attrib.Value.Max);
            }
            
			sb.AppendLine("Description/Bio: " + player.Player.Description);
			player.MessageHandler(sb.ToString());
		}

		private static void Emote(User.User player, List<string> commands) {
			string temp = "";
			if (commands[0].Length > 6) temp = commands[0].Substring(6);
			else {
				player.MessageHandler("You go to do something but what?.");
				return;
			}
            if (!player.Player.IsNPC) {
                player.MessageHandler(player.Player.FirstName + " " + temp + ".");
            }
			Rooms.Room.InformPlayersInRoom((Room.IsDark(player.Player.Location) == true ? "Someone" : player.Player.FirstName) + " " + temp + ".", player.Player.Location, new List<string>(new string[] { player.UserID }));
		}

		private static void Say(User.User player, List<string> commands) {
            string temp ="";
            if (commands[0].Length > 4)	temp = commands[0].Substring(4);
            else{
                if (player.Player.IsNPC) {
                    player.MessageHandler("You decide to stay quiet since you had nothing to say.");
                    return;
                }
            }
            if (!player.Player.IsNPC) {
                player.MessageHandler("You say \"" + temp + "\"");
            }
			Rooms.Room.InformPlayersInRoom((Room.IsDark(player.Player.Location) == true ? "Someone" : player.Player.FirstName) + " says \"" + temp + "\"",
				player.Player.Location, new List<string>(new string[] { player.UserID })); 
		}

		//a whisper is a private message but with a chance that other players may hear what was said, other player has to be in the same room
		private static void Whisper(User.User player, List<string> commands){
			List<User.User> toPlayerList = new List<User.User>();

			if (commands.Count > 2){
				if (commands[2].ToUpper() == "SELF") {
					player.MessageHandler("You turn your head towards your own shoulder and whisper quietly to yourself.");
					Room.InformPlayersInRoom((Room.IsDark(player.Player.Location) == true ? "Someone" : player.Player.FirstName) + " whispers into " + player.Player.Gender == "MALE" ? "his" : "her" + " own shoulder.", player.Player.Location,
						new List<string>(new string[] { player.UserID })); ;
					return;
				}

				toPlayerList = MySockets.Server.GetAUserByName(commands[2]).Where(p => p.Player.Location == player.Player.Location).ToList();
			}	

			User.User toPlayer = null;
			string message = "";

			if (toPlayerList.Count < 1) {
				player.MessageHandler("You whisper to no one. Creepy.");
				return;
			}
			else if (toPlayerList.Count > 1) { //let's narrow it down by including a last name (if provided)
				toPlayer = toPlayerList.Where(p => String.Compare(p.Player.LastName, commands[3], true) == 0).SingleOrDefault();
			}
			else {
				if (toPlayerList.Count == 1) {
					toPlayer = toPlayerList[0];
				}
				if (commands.Count == 2 || toPlayer.UserID == player.UserID) {
						player.MessageHandler("You realize you have nothing to whisper about.");
						return;
					}
			}

			bool fullName = true;
			if (toPlayer == null) {
				message = "You try and whisper to " + commands[2].CamelCaseWord() + " but they're not around.";
			}
			else {
				int startAt = commands[0].ToLower().IndexOf(toPlayer.Player.FirstName.ToLower() + " " + toPlayer.Player.LastName.ToLower());
				if (startAt == -1 || startAt > 11) {
					startAt = commands[0].ToLower().IndexOf(toPlayer.Player.FirstName.ToLower());
					fullName = false;
				}

				if (startAt > 11) startAt = 11 + toPlayer.Player.FirstName.Length + 1;
				else startAt += toPlayer.Player.FirstName.Length + 1;
				if (fullName) startAt += toPlayer.Player.LastName.Length + 1;

				if (commands[0].Length > startAt) {
					message = commands[0].Substring(startAt);
					player.MessageHandler("You whisper to " + toPlayer.Player.FirstName + " \"" + message + "\"");
					toPlayer.MessageHandler((Room.IsDark(player.Player.Location) == true ? "Someone" : player.Player.FirstName) + " whispers to you \"" + message + "\"");
					//this is where we would display what was whispered to players with high perception?
					Room.InformPlayersInRoom((Room.IsDark(player.Player.Location) == true ? "Someone" : player.Player.FirstName) + " whispers something to " + toPlayer.Player.FirstName, player.Player.Location, new List<string>(new string[] { player.UserID, toPlayer.UserID }));
				}
			}
		}

		//a tell is a private message basically, location is not a factor
		private static void Tell(User.User player, List<string> commands) {
			List<User.User> toPlayerList = MySockets.Server.GetAUserByName(commands[2]).ToList();
			User.User toPlayer = null;
			string message = "";

			if (commands[2].ToUpper() == "SELF") {
				player.MessageHandler("You go to tell yourself something when you realize you already know it.");
				return;
			}

			if (toPlayerList.Count < 1) {
				message = "There is no one named " + commands[2].CamelCaseWord() + " to tell something.";
			}
			else if (toPlayerList.Count > 1) { //let's narrow it down by including a last name (if provided)
				toPlayer = toPlayerList.Where(p => String.Compare(p.Player.LastName, commands[3], true) == 0).SingleOrDefault();
			}
			else {
				toPlayer = toPlayerList[0];
				if (toPlayer.UserID == player.UserID) {
					player.MessageHandler("You tell yourself something important.");
					return;
				}
			}

		   bool fullName = true;
			if (toPlayer == null) {
				message = "There is no one named " + commands[2].CamelCaseWord() + " to tell something.";
			}
			else {
				int startAt = commands[0].ToLower().IndexOf(toPlayer.Player.FirstName.ToLower() + " " + toPlayer.Player.LastName.ToLower());
				if (startAt == -1 || startAt > 11) {
					startAt = commands[0].ToLower().IndexOf(toPlayer.Player.FirstName.ToLower());
					fullName = false;
				}

				if (startAt > 11) startAt = 11 + toPlayer.Player.FirstName.Length + 1;
				else startAt += toPlayer.Player.FirstName.Length + 1;
				if (fullName) startAt += toPlayer.Player.LastName.Length + 1;

				if (commands[0].Length > startAt) {
					message = commands[0].Substring(startAt);
					player.MessageHandler("You tell " + toPlayer.Player.FirstName + " \"" + message + "\"");
					toPlayer.MessageHandler(player.Player.FirstName + " tells you \"" + message + "\"");
				}
				else {
					player.MessageHandler("You have nothing to tell them.");
				}
			}
		}

		private static void Who(User.User player, List<string> commands) {
			StringBuilder sb = new StringBuilder();
			sb.AppendLine("PlayerName");
			sb.AppendLine("----------");
			MySockets.Server.GetCurrentUserList()
				.Where(u => u.CurrentState == User.User.UserState.TALKING)
				.OrderBy(u => u.Player.FirstName)
				.ToList()
				.ForEach(u => sb.AppendLine(u.Player.FirstName + " " + u.Player.LastName));
			
			player.MessageHandler(sb.ToString());
		}

		private static void Help(User.User player, List<string> commands) {
			StringBuilder sb = new StringBuilder();
			if (commands.Count < 3) commands.Add("all");

			if (String.Compare(commands[2], "all", true) == 0 || String.Compare(commands[2], "combat", true) == 0) {
				sb.AppendLine("Combat Commands".FontStyle(Utils.FontStyles.BOLD));
				foreach (KeyValuePair<string, CommandDelegate> key in CombatCommands.OrderBy(k => k.Key)) {
					sb.AppendLine(key.Key.CamelCaseWord());
				}
			}
			if (String.Compare(commands[2], "all", true) == 0 || String.Compare(commands[2], "general", true) == 0) {
				sb.AppendLine("\r\nGeneral Commands".FontStyle(Utils.FontStyles.BOLD));
                foreach (KeyValuePair<string, CommandDelegate> key in MovementCommands.OrderBy(k => k.Key)) {
                    if (key.Key.Length > 2) {
                        sb.AppendLine(key.Key.CamelCaseWord());
                    }
				}
                foreach (KeyValuePair<string, CommandDelegate> key in PlayerCommands.OrderBy(k => k.Key)) {
					sb.AppendLine(key.Key.CamelCaseWord());
				}
                foreach (KeyValuePair<string, CommandDelegate> key in VisualCommands.OrderBy(k => k.Key)) {
					sb.AppendLine(key.Key.CamelCaseWord());
				}
			}
			player.MessageHandler(sb.ToString());
		}
	}
}
