using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rooms;
using User;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;
using Extensions;

namespace Commands {
    public partial class CommandParser {
        //TODO: should be able to find item based on partial name by using best guess
        
        public static void Drop(User.User player, List<string> commands) {
            //1.get the item name from the command, may have to join all the words after dropping the command
            StringBuilder itemName = new StringBuilder();

            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            //2.get the item from the DB
            List<Items.Iitem> items = Items.Items.GetByName(itemName.ToString().Trim(), -1);  //location should be -1 if a player is in posession of an item
            Items.Iitem item = items[itemPosition - 1];
           
            //3.have player drop item
            string msgPlayer = null;

            if (item != null) {
                player.Player.RemoveItemFromInventory(item);
                item.Location = player.Player.Location;
                item.Save();

                //4.Inform room and player of action
                string msgOthers = string.Format("{0} drops {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You drop {0}", item.Name);
            }
            else {
                msgPlayer = "You are not carrying anything of the sorts.";
            }
            
            player.MessageHandler(msgPlayer);
        }

        public static void Grab(User.User player, List<string> commands) {
            if (commands.Contains("from")) {
                commands[0].Replace("grab", "get");
                commands[1] = "get";
                Get(player, commands);
                return;
            }

            StringBuilder itemName = new StringBuilder();
            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            //1.get the item name from the command, may have to join all the words after dropping the command
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
           
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            //2.get the item from the DB
            List<Items.Iitem> items = Items.Items.GetByName(itemName.ToString().Trim(), player.Player.Location);
            Items.Iitem item = items[itemPosition - 1];

            string msgPlayer = null;
            //3.have player grab item
            if (item != null && item.IsMovable) {
                item.Location = -1;
                item.Save();
                player.Player.AddItemToInventory(item);

                //4.Inform room and player of action
                string msgOthers = string.Format("{0} grabs {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));

                msgPlayer = string.Format("You grab {0}", item.Name);
            }
            else if (item != null && !item.IsMovable) {
                msgPlayer = "Nope.  You are not going to be able to take this with you.";
            }
            else {
                msgPlayer = "Grab what?";
            }

            player.MessageHandler(msgPlayer);
        }

        public static void Unequip(User.User player, List<string> commands) {
            StringBuilder itemName = new StringBuilder();
            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            List<Items.Iitem> items = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            Items.Iitem item = items[itemPosition - 1];
            string msgPlayer = null;

            if (item != null){
                player.Player.UnequipItem(item);
                string msgOthers = string.Format("{0} unequips {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] {player.UserID}));
                msgPlayer = string.Format("You unequip {0}", item.Name);
            }
            else {
                msgPlayer = "You don't seem to be equipping that at the moment.";
            }

                player.MessageHandler(msgPlayer);
        }

        public static void Equip(User.User player, List<string> commands) {
            StringBuilder itemName = new StringBuilder();

            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            List<Items.Iitem> items = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            string msgPlayer = null;
            
            //players need to specify an indexer or we will just give them the first one we found that matched
            Items.Iitem item = items[itemPosition - 1];

            //if item is clothing or container cast and call the appropriate Wear() method
            //Items.Iclothing clothing = (Items.Iclothing)item;
            Items.Icontainer container = (Items.Icontainer)item;
            Items.Iweapon weapon = (Items.Iweapon)item;

            if (item != null && item.IsWearable) {
                player.Player.EquipItem(item);
                if (container != null) {
                    container.Wear();
                }
                //if (clothing != null) {
                //    clothing.Wear();
                //}
                string msgOthers = string.Format("{0} equips {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You equip {0}", item.Name);
            }
            else if (weapon.IsWieldable) {
                msgPlayer = "This item can only be wielded not worn.";
            }
            else if (!item.IsWearable || !weapon.IsWieldable) {
                msgPlayer = "That doesn't seem like something you can wear.";
            }
            else {
                msgPlayer = "You don't seem to have that in your inventory to be able to wear.";
            }

                player.MessageHandler(msgPlayer);
        }

        public static void Wield(User.User player, List<string> commands) {
            StringBuilder itemName = new StringBuilder();
            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            
            foreach (string word in commands) {
                itemName.Append(word + " ");
            }
            
            string msgPlayer = null;

            List<Items.Iitem> items = Items.Items.GetByName(itemName.ToString().Trim(), -1);
            Items.Iitem item = items[itemPosition - 1];
            
            Items.Iweapon weapon = (Items.Iweapon)item;
            
            if (weapon != null && weapon.IsWieldable && player.Player.GetWieldedWeapons().Count < 2) {
                if (string.IsNullOrEmpty(player.Player.MainHand)) { //no mainhand assigned yet
                    player.Player.MainHand = Items.Wearable.WIELD_RIGHT.ToString(); //we will default to the right hand
                }
                
                player.Player.Wield(item);
                //weapon.Wield();
                string msgOthers = string.Format("{0} wields {1}", player.Player.FirstName, item.Name);
                Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
                msgPlayer = string.Format("You wield {0}", item.Name);
            }
            else if (player.Player.GetWieldedWeapons().Count == 2){
                msgPlayer =  "You are already wielding two weapons...and you don't seem to have a third hand.";
            }
            else if (item.IsWearable) {
                msgPlayer = "This item can only be wielded not worn.";
            }
            else if (!item.IsWearable) {
                msgPlayer = "That not something you can wear or would want to wear.";
            }
            else {
                msgPlayer = "You don't seem to have that in your inventory to be able to wear.";
            }

            player.MessageHandler(msgPlayer);
        }

        public static void Eat(User.User player, List<string> commands) {
            Items.Iitem item = GetItem(commands);
            if (item == null) {
                player.MessageHandler("You don't seem to be carrying that to eat it.");
                return;
            }

            Items.Iedible food = item as Items.Iedible;
            if (food != null) {
               Consume(player, commands, "eat", food);
            }
            else {
                player.MessageHandler("You can't eat that!");
            }
            
        }

        public static void Drink(User.User player, List<string> commands) {
            Items.Iitem item = GetItem(commands);
            if (item == null) {
                player.MessageHandler("You don't seem to be carrying that to drink it.");
                return;
            }

            Items.Ibeverage drink = item as Items.Ibeverage;
            if (drink != null) {
                Consume(player, commands, "drink", null, drink);
            }
            else {
                player.MessageHandler("You can't drink that!");
            }
            
        }

        private static Items.Iitem GetItem(List<string> commands) {
            StringBuilder itemName = new StringBuilder();
            
            int itemPosition = 1;
            string[] position = commands[commands.Count - 1].Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName = itemName.Remove(itemName.Length - 2, 2);
            }

            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);
            

            foreach (string word in commands) {
                itemName.Append(word + " ");
            }

            return Items.Items.GetByName(itemName.ToString().Trim(), -1)[itemPosition - 1];
        }

        private static void Consume(User.User player, List<string> commands, string action, Items.Iedible food = null, Items.Ibeverage drink = null){
            string upDown = "gain";
            StringBuilder msgPlayer = new StringBuilder();
            string msgOtherPlayers = null;
                        
            Dictionary<string, double> affectAttributes = null;
            Items.Iitem item = null;

            if (food != null) {
                affectAttributes = food.Consume();
                item = (Items.Iitem)food;
            }
            else if (drink != null) {
                affectAttributes = drink.Consume();
                item = (Items.Iitem)drink;
            }
            
            foreach (KeyValuePair<string, double> attribute in affectAttributes) {
                //TODO: this doesn't seem to be working properly for Hitpoints, gonna have to put a breakpoint here
                player.Player.ApplyEffectOnAttribute(attribute.Key.CamelCaseWord(), attribute.Value);
                if (attribute.Value < 0) {
                    upDown = "lost";
                }

                msgPlayer.AppendLine(string.Format("You {0} {1} and {2} {3:F1} points of {4}.", action, item.Name, upDown, Math.Abs(attribute.Value), attribute.Key));
                msgOtherPlayers = string.Format("{0} {1}s {2}", player.Player.FirstName.CamelCaseWord(), action, item.Name);
            }

            //now remove it from the players inventory
            player.Player.RemoveItemFromInventory(item);

            //item has been consumed so get rid of it from the DB
            MongoUtils.MongoData.ConnectToDatabase();
            MongoDatabase db = MongoUtils.MongoData.GetDatabase("World");
            MongoCollection col = db.GetCollection("Items");
            col.Remove(Query.EQ("_id", item.Id));

            Room.InformPlayersInRoom(msgOtherPlayers, player.Player.Location, new List<string>(new string[] { player.UserID })); 
            player.MessageHandler(msgPlayer.ToString());
        }

        //container commands
        public static void Put(User.User player, List<string> commands) {
            //this command is used only for putting an Item in the root inventory of a player into a bag.  
            //If an item needs to go from a bag to the root inventory level player should use the GET command instead.

            int itemPosition = 1;
            int containerPosition = 1;
            string itemName = "";
            string containerName = "";

           //this allows players to use either IN or INTO
            int commandIndex = 0;
            foreach (string word in commands) {
                if (string.Equals(word, "in", StringComparison.InvariantCultureIgnoreCase)) {
                    commands[commandIndex] = "into";
                    break;
                }
                commandIndex++;
            }

            int location;
            if (string.Equals(commands[commands.Count - 1], "inventory", StringComparison.InvariantCultureIgnoreCase)) {
                location = -1;
                commands.RemoveAt(commands.Count - 1); //get rid of "inventory" se we can parse an index specifier if there is one
            }
            else {
                location = player.Player.Location;
            }

            ParseItemPositions(commands, "into", out itemPosition, out containerPosition, out itemName, out containerName);

            Items.Iitem retrievedItem = null;
            Items.Iitem containerItem = null;

            //using a recursive method we will dig down into each sub container looking for the appropriate container
            if (location != -1) {
                TraverseItems(player, containerName.ToString().Trim(), itemName.ToString().Trim(), containerPosition, itemPosition, out retrievedItem, out containerItem);

                //player is an idiot and probably wanted to put it in his inventory but didn't specify it so let's check there as well
                if (containerItem == null) {
                    foreach (Items.Iitem tempContainer in player.Player.GetInventoryAsItemList()) {
                        //Items.Iitem tempContainer = Items.Items.GetByID(id);
                        containerItem = KeepOpening(containerName.CamelCaseString(), tempContainer, containerPosition);
                        if (string.Equals(containerItem.Name, containerName.CamelCaseString(), StringComparison.InvariantCultureIgnoreCase)) {
                            break;
                        }
                    }
                }
            }
            else{ //player specified it is in his inventory 
               foreach (string id in player.Player.GetInventoryList()) {
                    Items.Iitem tempContainer = Items.Items.GetByID(id);
                    containerItem = KeepOpening(containerName.CamelCaseString(), tempContainer, containerPosition);
                    if (string.Equals(containerItem.Name, containerName.CamelCaseString(), StringComparison.InvariantCultureIgnoreCase)) {
                        break;
                    }
                }
            }

            bool stored = false;

            retrievedItem = player.Player.GetInventoryAsItemList().Where(i => i.Name == itemName).SingleOrDefault();

            if (containerItem != null  && retrievedItem != null) {
                retrievedItem.Location = containerItem.Location;
                retrievedItem.Save();
                Items.Icontainer container = containerItem as Items.Icontainer;
                stored = container.StoreItem(retrievedItem.Id.ToString());
            }
            

            string msg = null;

            if (!stored) {
                msg = "Could not put " + itemName.ToString().Trim().ToLower() + " inside the " + containerName.ToString().Trim().ToLower() + ".";
            }
            else {
                msg = "You place " + itemName.ToString().Trim().ToLower() + " inside the " + containerName.ToString().Trim().ToLower() + ".";
            }

            player.MessageHandler(msg);
        }

        public static void Get(User.User player, List<string> commands) {
            int itemPosition = 1;
            int containerPosition = 1;
            string itemName = "";
            string containerName = "";

            ParseItemPositions(commands, "from", out itemPosition, out containerPosition, out itemName, out containerName);
          
            int location = player.Player.Location;
           
            Items.Iitem retrievedItem = null;
            Items.Iitem containerItem = null;
            
            //using a recursive method we will dig down into each sub container and look for the appropriate item/container
            TraverseItems(player, containerName.ToString().Trim(), itemName.ToString().Trim(), containerPosition, itemPosition, out retrievedItem, out containerItem);

            string msg = null;
            string msgOthers = null;

            if (retrievedItem != null) {
                Items.Icontainer container = containerItem as Items.Icontainer;
                if (containerItem != null) {
                    retrievedItem = container.RetrieveItem(retrievedItem.Id.ToString());
                    msg = "You take " + retrievedItem.Name.ToLower() + " out of " + containerItem.Name.ToLower() + ".";

                    msgOthers = string.Format("{0} takes {1} out of {2}", player.Player.FirstName, retrievedItem.Name.ToLower(), containerItem.Name.ToLower());
                    
                }
                else {
                    msg = "You get " + retrievedItem.Name.ToLower();
                    msgOthers = string.Format("{0} grabs {1}.", player.Player.FirstName, retrievedItem.Name.ToLower());
                }

                retrievedItem.Location = -1;
                retrievedItem.Save();
                player.Player.AddItemToInventory(retrievedItem);
            }
            else {
                msg = "You can't seem to find " + itemName.ToString().Trim().ToLower() + " to grab it.";
            }

            Room.InformPlayersInRoom(msgOthers, player.Player.Location, new List<string>(new string[] { player.UserID }));
            player.MessageHandler(msg);

        }

        private static void ParseItemPositions(List<string> commands, string separator, out int itemPosition, out int containerPosition, out string itemNameReturned, out string containerNameReturned){
            itemPosition = 1;
            containerPosition = 1;
            
            string full = commands[0];
            commands.RemoveAt(0);
            commands.RemoveAt(0);

            StringBuilder itemName = new StringBuilder();
            foreach (string word in commands) {
                if (!string.Equals(word, separator, StringComparison.InvariantCultureIgnoreCase)) {
                    itemName.Append(word + " ");
                }
                else {
                    //we got the item name
                    break;
                }
            }

            string[] position = itemName.ToString().Trim().Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (position.Count() > 1) {
                int.TryParse(position[position.Count() - 1], out itemPosition);
                itemName.Remove(itemName.Length - 3, 2);
            }

            //get the container name as well
            StringBuilder containerName = new StringBuilder();
            bool start = false;

            foreach (string word in commands) {
                if (string.Equals(word, separator, StringComparison.InvariantCultureIgnoreCase)) {
                    start = true;
                    continue;
                }
                if (start) {
                    containerName.Append(word + " ");
                }
            }

            string[] positionItem = containerName.ToString().Trim().Split('.'); //we are separating based on using the decimal operator after the name of the npc/item
            if (positionItem.Count() > 1) {
                int.TryParse(positionItem[positionItem.Count() - 1], out containerPosition);
                containerName.Remove(containerName.Length - 3, 2);
            }

            itemNameReturned = itemName.ToString().Trim().CamelCaseString();
            containerNameReturned = containerName.ToString().Trim().CamelCaseString();
        }

        private static void TraverseItems(User.User player, string containerName, string itemName, int containerPosition, int itemPosition, out Items.Iitem retrievedItem, out Items.Iitem retrievedContainer) {
            int containerIndex = 1;
            int itemIndex = 1;
            retrievedItem = null;
            retrievedContainer = null;

            if (!string.IsNullOrEmpty(containerName.CamelCaseString())) {
                foreach (string itemID in Room.GetItemsInRoom(player.Player.Location)) {
                    Items.Iitem inventoryItem = Items.Items.GetByID(itemID);

                    inventoryItem = KeepOpening(containerName.CamelCaseString(), inventoryItem, containerPosition, containerIndex);

                    if (inventoryItem.Name.Contains(containerName.CamelCaseString())) {
                        retrievedContainer = inventoryItem;
                        break;
                    }
                }
            }           

            //if we retrieved a specific indexed container search within it for the item
            if (retrievedContainer != null) {
                Items.Icontainer container = null;
                container = retrievedContainer as Items.Icontainer;
                foreach (string itemID in container.GetContents()) {
                    Items.Iitem inventoryItem = Items.Items.GetByID(itemID);

                    inventoryItem = KeepOpening(itemName.CamelCaseString(), inventoryItem, itemPosition, itemIndex);

                    if (inventoryItem.Name.Contains(itemName.CamelCaseString())) {
                        retrievedItem = inventoryItem;
                        break;
                    }
                }
            }
            else {//we are grabbing a container or an item without a specific index
                foreach (string itemID in Room.GetItemsInRoom(player.Player.Location)) {
                    Items.Iitem inventoryItem = Items.Items.GetByID(itemID);

                    inventoryItem = KeepOpening(itemName.CamelCaseString(), inventoryItem, itemPosition, itemIndex);

                    if (inventoryItem.Name.Contains(itemName.CamelCaseString())) {
                        retrievedItem = inventoryItem;
                        break;
                    }
                }
            }
        }
    }
}
