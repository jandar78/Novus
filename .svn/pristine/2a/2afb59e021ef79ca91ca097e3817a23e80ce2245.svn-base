using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MongoDB;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;

namespace Scripts
{
    public class Login
    {
		 private static List<UserScript> usersLoggingIn = new List<UserScript>();

		 public static Login loginScript = null;

		 public static Login GetScript() {
			 return loginScript ?? (loginScript = new Login());
		 }

		 public void AddUserToScript(User.User user){
			 usersLoggingIn.Add(new UserScript(user));
		 }

		 public User.User.UserState InsertResponse(string response, string userId) {
			 User.User.UserState state = User.User.UserState.LOGGING_IN; 
			 
			 UserScript specificUser = usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault();
			 
			 if (specificUser != null && specificUser.currentStep == Steps.AWAITINGRESPONSE) {
				 
				 switch (specificUser.lastStep) {
					 case Steps.NAME:
						 if (ValidatePlayerName(specificUser.user.UserID, response)) {
							 userId = specificUser.user.UserID;
							 specificUser.user.LogID = specificUser.user.UserID; 
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().currentStep = Steps.PASSWORD;
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().lastStep = Steps.AWAITINGRESPONSE;
						 }
						 else {
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().currentStep = Steps.NAME;
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().lastStep = Steps.NAME;
						 }
						 break;
					 
					 case Steps.PASSWORD:
						 if (ValidatePlayerPassword(specificUser.user.UserID, response)) {
							 specificUser.currentStep = Steps.SUCCEEDED;
							 specificUser.lastStep = Steps.PASSWORD; 
						 }
						 else {
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().currentStep = Steps.PASSWORD;
							 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().lastStep = Steps.PASSWORD;
						 }
						 break;
                     case Steps.CREATECHAR:
                         if (String.Compare(response[0].ToString(), "y", true) == 0) {
                             state = User.User.UserState.CREATING_CHARACTER;
                             usersLoggingIn.Remove(specificUser);
                         }
                         else {
                             specificUser.currentStep = Steps.NAME;
                             specificUser.lastStep = Steps.NONE;
                         }
                         break;
					 default:
						 //something has gone terribly wrong if we get here
						 break;
				 }
			 }
			 return state;
		 }

		 public string ExecuteScript(string userId) {
			 string message = null;
			 UserScript specificUser = usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault();
			 if (specificUser != null && specificUser.lastStep != specificUser.currentStep) {
				 switch (specificUser.currentStep) {
					 case Steps.NAME:
						 message = AskForFirstName();
						 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().currentStep = Steps.AWAITINGRESPONSE;
						 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().lastStep = Steps.NAME;
						 break;
					 case Steps.PASSWORD:
						 message = AskForPassword();
						 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().currentStep = Steps.AWAITINGRESPONSE;
						 usersLoggingIn.Where(u => u.user.UserID == userId).SingleOrDefault().lastStep = Steps.PASSWORD;
						 break;
					 case Steps.SUCCEEDED:
						 //let's see if they are connecting back to a limbo character first and set things right
						 User.User user = new User.User();
						 user = MySockets.Server.GetAUserPlusState(specificUser.user.UserID, User.User.UserState.LIMBO);
						 if (user != null) {
							 MySockets.Server.UpdateUserSocket(specificUser.user.UserID);
							 specificUser.user = user; 
						 }
						 else {
							 specificUser.user.Player.Load(specificUser.user.Player.ID);
						 }
						 message = "Welcome " + specificUser.user.Player.FirstName + " " + specificUser.user.Player.LastName + "!";
						 specificUser.user.CurrentState = User.User.UserState.TALKING;
						 specificUser.user.InBuffer = "look\r\n";
						 usersLoggingIn.Remove(specificUser);
						 break;
					 case Steps.AWAITINGRESPONSE:
					 default:
						 break;
				 }
			 }
			 else {
				 if (specificUser != null && specificUser.currentStep == Steps.NAME) {
					 message = "No character with that name exists!\n\rDo you want to create a new character? (Y/N)";
					 specificUser.currentStep = Steps.AWAITINGRESPONSE;
                     specificUser.lastStep = Steps.CREATECHAR;
				 }
				 else if (specificUser != null && specificUser.currentStep == Steps.PASSWORD) {
					 message = "Incorrect Password!";
                     specificUser.lastStep = Steps.NONE;
				 }
			 }

			 return message;
		 }

		 private bool ValidatePlayerPassword(string userID, string response) {
			 MongoUtils.MongoData.ConnectToDatabase();
			 MongoDatabase characterDB = MongoUtils.MongoData.GetDatabase("Characters");
			 MongoCollection characterCollection = characterDB.GetCollection("PlayerCharacter");
			 IMongoQuery query = Query.And(Query.EQ("_id", ObjectId.Parse(userID) ), Query.EQ("Password", response));
			 BsonDocument found = characterCollection.FindOneAs<BsonDocument>(query);
			 if (found != null) {
				 return true;
			 }

			 return false;
		 }

		 private bool ValidatePlayerName(string userID, string response) {
			 string[] names = response.Split(' ');
			 if (names.Count() != 2) {
				 return false;
			 }

			 MongoUtils.MongoData.ConnectToDatabase();
			 MongoDatabase characterDB = MongoUtils.MongoData.GetDatabase("Characters");
			 MongoCollection characterCollection = characterDB.GetCollection("PlayerCharacter");
			 IMongoQuery query = Query.And(Query.EQ("FirstName", names[0].ToLower()), Query.EQ("LastName", names[1].ToLower()));
			 BsonDocument found = characterCollection.FindOneAs<BsonDocument>(query);
			
		    if (found != null) {
				 //set the id to the ID of the one we found in the database for the PlayerCharacter to match up on the Password
				 usersLoggingIn.Where(u => u.user.UserID == userID).SingleOrDefault().user.UserID = found["_id"].AsObjectId.ToString();
				 userID = found["_id"].AsObjectId.ToString();
				 usersLoggingIn.Where(u => u.user.UserID == userID).SingleOrDefault().user.Player.ID = userID;

				 //this should prevent a single character from logging in more than once while that character is actively playing
				 if ((usersLoggingIn.Where(u => u.user.UserID == userID).SingleOrDefault().user.CurrentState != User.User.UserState.TALKING &&
					 usersLoggingIn.Where(u => u.user.UserID == userID).SingleOrDefault().user.CurrentState != User.User.UserState.JUST_CONNECTED &&
					 usersLoggingIn.Where(u => u.user.UserID == userID).SingleOrDefault().user.CurrentState != User.User.UserState.CREATING_CHARACTER)){
					 return true;
				 }
			 }
			 return false;
		 }

		 private string AskForFirstName() {
			 return "Enter your characters full name (First Last): ";
		 }

		 private string AskForLastName() {
			 return "Enter your characters last name: ";
		 }

		 private string AskForPassword() {
			 return "Enter your password: ";
		 }
    }

   internal enum Steps { NAME, PASSWORD, AWAITINGRESPONSE, SUCCEEDED, CREATECHAR, NONE };

	internal class UserScript{
		public User.User user = null;
		public Steps currentStep;
		public Steps lastStep;

		public UserScript(User.User user) {
			this.user = user;
			currentStep = Steps.NAME;
			lastStep = Steps.NONE;
		}
	}
}
